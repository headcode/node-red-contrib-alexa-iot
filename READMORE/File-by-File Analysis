File-by-File Analysis

Let’s break down how each file contributes to the module’s functionality, focusing on the hub and device nodes, their communication with Amazon, and the device discovery process.
1. package.json
This file defines the module’s metadata, dependencies, and Node-RED configuration.

Purpose: It specifies the module’s name, version, dependencies, and Node-RED-specific settings, such as the nodes it provides and their entry points.
Key Details:

Name and Version: node-red-contrib-alexa-iot, version 0.2.0.
Description: “Alexa controlled Node-RED nodes for Amazon Echo devices, no Alexa Skills or cloud dependencies required.”
Node-RED Nodes:

alexa-iot-hub: Implemented in nodes/alexa-iot-hub.js.
alexa-iot-device: Implemented in nodes/alexa-iot-device.js.

Dependencies:

express (for the web server in the hub node).
helmet (for security headers).
express-rate-limit (to limit incoming requests).
node-red-contrib-alexa-smart-home (handles Alexa Smart Home protocol).
sanitize-html (sanitizes device names for security).

Engines: Requires Node.js >=20.0.0, npm >=10.0.0, and Node-RED >=3.1.0.
Files: Includes package.json, README.md, LICENSE, nodes/, and test/.

Role in Functionality:

This file ensures the module is properly registered with Node-RED, specifying the two nodes and their JavaScript files. It also lists dependencies critical for the hub node’s server and Alexa communication.

2. nodes/alexa-iot-hub.html
This file defines the user interface for configuring the alexa-iot-hub node in the Node-RED editor.

Purpose: Provides the Node-RED editor interface for the hub node, allowing users to set the node’s name, port, and debug mode.
Key Features:

Node Registration:

Registers the node type alexa-iot-hub in the input category with an orange color (#FF9900) and a bridge icon.
Defines default properties: name (optional string), port (default 80, validated as a number), and debug (boolean, default false).
Sets the node’s label to its name or “Alexa IOT Hub” if unnamed, with italic styling if named.

UI Form:

Input fields for name (text), port (number), and debug (checkbox).
Includes ARIA labels for accessibility (e.g., “Port number for Alexa service”).

Validation:

On save, checks if the port is a valid number between 1 and 65535, showing an error if invalid.

Styling: Uses CSS to align form elements in a grid layout for a clean UI.

Role in Functionality:

This file allows users to configure the hub node’s port (for the Express server) and debug mode (for logging). The port is critical for the hub to listen for Alexa requests, and the validation ensures it’s within a valid range. The UI makes it easy to integrate the hub into Node-RED flows.

3. nodes/alexa-iot-hub.js
This file contains the runtime logic for the alexa-iot-hub node.

Purpose: Implements the hub node as an Express server that interfaces with Alexa using the node-red-contrib-alexa-smart-home package, handles device discovery, and processes Alexa directives to send messages to device nodes.
Key Features:

Server Setup:

Creates an Express app with helmet for security and express-rate-limit to limit requests (100 requests per 15 minutes).
Listens on the configured port (default 80).

Alexa Integration:

Uses node-red-contrib-alexa-smart-home to handle Alexa Smart Home protocol.
Configures a discoveryCallback for device discovery, which:

Iterates over all Node-RED nodes to find alexa-iot-device nodes linked to this hub (via hub property matching the hub’s ID).
Returns a list of endpoints with:

endpointId: The device node’s ID.
friendlyName: Sanitized device name (using sanitize-html to remove tags).
description: “Node-RED” + device name.
manufacturerName: “Node-RED”.
displayCategories: Supports “LIGHT” and “SWITCH”.
capabilities: Supports Alexa.PowerController (on/off), Alexa.BrightnessController (brightness), and Alexa.ColorController (color).

Configures a directiveCallback to handle Alexa commands (e.g., TurnOn, TurnOff, SetBrightness, SetColor), which:

Finds the target device node by endpointId.
Creates a message with topic (e.g., “power”, “brightness”, “color”) and payload (e.g., “ON”, brightness value, color object).
Sends the message to the device node using deviceNode.receive(msg).
Responds to Alexa with the state or an error if the device is not found.

Node Lifecycle:

Logs when the server starts or closes.
Closes the Express server gracefully when the node is stopped.

Role in Functionality:

This file is the core of the hub node, enabling communication with Amazon Alexa. It handles device discovery by listing all linked device nodes as endpoints and processes Alexa directives by sending messages to the appropriate device nodes. The use of sanitize-html ensures device names are safe, and rate limiting protects the server from abuse.

4. nodes/alexa-iot-device.html
This file defines the user interface for configuring the alexa-iot-device node in the Node-RED editor.

Purpose: Provides the Node-RED editor interface for the device node, allowing users to set the device’s name, link it to a hub, and optionally select a target node for message forwarding.

Key Features Are:

Node Registration:

Registers the node type alexa-iot-device in the output category with an orange color (#FF9900) and a light icon.
Defines default properties: name (required string), hub (required, links to an alexa-iot-hub node), and targetNode (optional, for forwarding messages).
Sets the node’s label to its name or “Alexa IOT Device” if unnamed, with italic styling if named.

UI Form:

Input fields for name (text, required), hub (links to a hub node), and targetNode (dropdown of other nodes).
Populates the targetNode dropdown with all Node-RED nodes except alexa-iot-device and alexa-iot-hub, showing node type, name (if set), and ID.
Includes ARIA labels for accessibility (e.g., “Device name for Alexa”).

Validation:

On save, ensures the name is non-empty, throwing an error if not.
Warns if the selected targetNode no longer exists.

Styling: Uses CSS to align form elements in a grid layout, matching the hub node’s UI.

Role in Functionality:

This file enables users to configure device nodes with unique names (used in Alexa device discovery) and link them to a hub. The targetNode option allows messages to be forwarded to other nodes in the flow, enhancing flexibility. The validation ensures each device has a unique name for Alexa to recognize.

5. nodes/alexa-iot-device.js
This file contains the runtime logic for the alexa-iot-device node.

Purpose: Implements the device node, which processes messages received from the hub node (e.g., power, brightness, color) and outputs them to the flow or forwards them to a target node.
                                        
Key Features Are:

Configuration Validation:

Checks that name and hub are provided, logging an error if not.
Verifies the linked hub node exists, logging an error if not.

Message Handling:

Listens for input messages from the hub (via node.on('input', ...)).
Processes messages based on topic:

power: Converts payload to “ON” or “OFF” (accepts true/"ON" for on, else off).
brightness: Clamps the payload to 0–100.
color: Passes the payload (color object) as-is.
Other topics: Logs a warning and skips processing.

Creates an output message with the processed payload.
Sends the message to the node’s output (via send(output)).
If a targetNode is configured, forwards the message to that node using target.receive(output), logging a warning if the target node is not found.

Error Handling:

Catches and logs errors during message processing, passing them to Node-RED’s done callback.

Role in Functionality:

This file handles the logic for individual device nodes, ensuring they correctly process Alexa commands (e.g., turn on/off, set brightness) and integrate with the Node-RED flow. The ability to forward messages to a targetNode allows integration with other Node-RED nodes (e.g., for controlling physical devices).
