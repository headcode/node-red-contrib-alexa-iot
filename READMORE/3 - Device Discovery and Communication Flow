Device Discovery and Communication Flow

Here’s how the module handles the “discover devices” request and subsequent communication:

Device Discovery:

When an Amazon Echo issues a “discover devices” request, the Alexa Smart Home protocol sends a discovery request to the hub node’s Express server (on the configured port, e.g., 80).
The discoveryCallback in alexa-iot-hub.js iterates over all Node-RED nodes, collecting alexa-iot-device nodes linked to the hub (where n.hub === node.id).
It returns a list of endpoints to Alexa, each with:

A unique endpointId (the device node’s ID).
A friendlyName (the sanitized device name set in the UI).
Supported capabilities (e.g., power, brightness, color).

Alexa registers these endpoints, making them available for voice control (e.g., “Alexa, turn on [device name]”).

Directive Handling:

When a user issues a voice command (e.g., “Alexa, turn on Living Room Light”), Alexa sends a directive to the hub node with the endpointId and command details (e.g., Alexa.PowerController.TurnOn).
The directiveCallback in alexa-iot-hub.js finds the device node with the matching endpointId (using RED.nodes.getNode(endpointId)).
It creates a message with a topic (e.g., “power”) and payload (e.g., “ON”) and sends it to the device node via deviceNode.receive(msg).
The device node (alexa-iot-device.js) processes the message, standardizes the payload, and sends it to its output in the Node-RED flow. If a targetNode is set, it forwards the message to that node.

Node-RED Flow Integration:

The device node’s output can be wired to other Node-RED nodes (e.g., to control a physical device like a smart light).
If a targetNode is configured, the message is also sent directly to that node, allowing parallel processing in the flow.
